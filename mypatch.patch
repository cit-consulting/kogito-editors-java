diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/IntegrationTask.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/IntegrationTask.java
new file mode 100644
index 0000000000..e1c378ee8f
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/IntegrationTask.java
@@ -0,0 +1,110 @@
+/*
+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.definition;
+
+import javax.validation.Valid;
+
+import org.jboss.errai.common.client.api.annotations.MapsTo;
+import org.jboss.errai.common.client.api.annotations.Portable;
+import org.jboss.errai.databinding.client.api.Bindable;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FieldParam;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormDefinition;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormField;
+import org.kie.workbench.common.forms.adf.definitions.settings.FieldPolicy;
+import org.kie.workbench.common.stunner.bpmn.definition.property.background.BackgroundSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.dimensions.RectangleDimensionsSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.font.FontSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.general.Documentation;
+import org.kie.workbench.common.stunner.bpmn.definition.property.general.Name;
+import org.kie.workbench.common.stunner.bpmn.definition.property.general.TaskGeneralSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.simulation.SimulationSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.IntegrationTaskExecutionSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.TaskType;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.TaskTypes;
+import org.kie.workbench.common.stunner.core.definition.annotation.Definition;
+import org.kie.workbench.common.stunner.core.definition.annotation.Property;
+import org.kie.workbench.common.stunner.core.definition.annotation.morph.Morph;
+import org.kie.workbench.common.stunner.core.rule.annotation.CanDock;
+import org.kie.workbench.common.stunner.core.util.HashUtil;
+
+import static org.kie.workbench.common.forms.adf.engine.shared.formGeneration.processing.fields.fieldInitializers.nestedForms.AbstractEmbeddedFormsInitializer.COLLAPSIBLE_CONTAINER;
+import static org.kie.workbench.common.forms.adf.engine.shared.formGeneration.processing.fields.fieldInitializers.nestedForms.AbstractEmbeddedFormsInitializer.FIELD_CONTAINER_PARAM;
+
+@Portable
+@Bindable
+@Definition
+@CanDock(roles = {"IntermediateEventOnActivityBoundary"})
+@Morph(base = BaseTask.class)
+@FormDefinition(
+        policy = FieldPolicy.ONLY_MARKED,
+        startElement = "general",
+        defaultFieldSettings = {@FieldParam(name = FIELD_CONTAINER_PARAM, value = COLLAPSIBLE_CONTAINER)}
+)
+public class IntegrationTask extends BaseTask {
+
+    @Property
+    @FormField(afterElement = "general")
+    @Valid
+    protected IntegrationTaskExecutionSet executionSet;
+
+    public IntegrationTask() {
+        this(
+                new TaskGeneralSet(new Name("Integration Task"), new Documentation("")),
+                new IntegrationTaskExecutionSet(),
+                new BackgroundSet(),
+                new FontSet(),
+                new RectangleDimensionsSet(),
+                new SimulationSet(),
+                new TaskType(TaskTypes.INTEGRATION)
+        );
+    }
+
+    public IntegrationTask(
+            final @MapsTo("general") TaskGeneralSet general,
+            final @MapsTo("executionSet") IntegrationTaskExecutionSet executionSet,
+            final @MapsTo("backgroundSet") BackgroundSet backgroundSet,
+            final @MapsTo("fontSet") FontSet fontSet,
+            final @MapsTo("dimensionsSet") RectangleDimensionsSet dimensionsSet,
+            final @MapsTo("simulationSet") SimulationSet simulationSet,
+            final @MapsTo("taskType") TaskType taskType
+    ) {
+        super(general, backgroundSet, fontSet, dimensionsSet, simulationSet, taskType);
+        this.executionSet = executionSet;
+    }
+
+    public IntegrationTaskExecutionSet getExecutionSet() {
+        return executionSet;
+    }
+
+    public void setExecutionSet(final IntegrationTaskExecutionSet executionSet) {
+        this.executionSet = executionSet;
+    }
+
+    @Override
+    public int hashCode() {
+        return HashUtil.combineHashCodes(super.hashCode(), executionSet.hashCode());
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o instanceof IntegrationTask) {
+            IntegrationTask other = (IntegrationTask) o;
+            return super.equals(other) && executionSet.equals(other.executionSet);
+        }
+        return false;
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/ScoringTask.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/ScoringTask.java
new file mode 100644
index 0000000000..faaafd7b03
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/ScoringTask.java
@@ -0,0 +1,110 @@
+/*
+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.definition;
+
+import javax.validation.Valid;
+
+import org.jboss.errai.common.client.api.annotations.MapsTo;
+import org.jboss.errai.common.client.api.annotations.Portable;
+import org.jboss.errai.databinding.client.api.Bindable;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FieldParam;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormDefinition;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormField;
+import org.kie.workbench.common.forms.adf.definitions.settings.FieldPolicy;
+import org.kie.workbench.common.stunner.bpmn.definition.property.background.BackgroundSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.dimensions.RectangleDimensionsSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.font.FontSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.general.Documentation;
+import org.kie.workbench.common.stunner.bpmn.definition.property.general.Name;
+import org.kie.workbench.common.stunner.bpmn.definition.property.general.TaskGeneralSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.simulation.SimulationSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.ScoringTaskExecutionSet;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.TaskType;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.TaskTypes;
+import org.kie.workbench.common.stunner.core.definition.annotation.Definition;
+import org.kie.workbench.common.stunner.core.definition.annotation.Property;
+import org.kie.workbench.common.stunner.core.definition.annotation.morph.Morph;
+import org.kie.workbench.common.stunner.core.rule.annotation.CanDock;
+import org.kie.workbench.common.stunner.core.util.HashUtil;
+
+import static org.kie.workbench.common.forms.adf.engine.shared.formGeneration.processing.fields.fieldInitializers.nestedForms.AbstractEmbeddedFormsInitializer.COLLAPSIBLE_CONTAINER;
+import static org.kie.workbench.common.forms.adf.engine.shared.formGeneration.processing.fields.fieldInitializers.nestedForms.AbstractEmbeddedFormsInitializer.FIELD_CONTAINER_PARAM;
+
+@Portable
+@Bindable
+@Definition
+@CanDock(roles = {"IntermediateEventOnActivityBoundary"})
+@Morph(base = BaseTask.class)
+@FormDefinition(
+        policy = FieldPolicy.ONLY_MARKED,
+        startElement = "general",
+        defaultFieldSettings = {@FieldParam(name = FIELD_CONTAINER_PARAM, value = COLLAPSIBLE_CONTAINER)}
+)
+public class ScoringTask extends BaseTask {
+
+    @Property
+    @FormField(afterElement = "general")
+    @Valid
+    protected ScoringTaskExecutionSet executionSet;
+
+    public ScoringTask() {
+        this(
+                new TaskGeneralSet(new Name("Scoring Task"), new Documentation("")),
+                new ScoringTaskExecutionSet(),
+                new BackgroundSet(),
+                new FontSet(),
+                new RectangleDimensionsSet(),
+                new SimulationSet(),
+                new TaskType(TaskTypes.PYTHON)
+        );
+    }
+
+    public ScoringTask(
+            final @MapsTo("general") TaskGeneralSet general,
+            final @MapsTo("executionSet") ScoringTaskExecutionSet executionSet,
+            final @MapsTo("backgroundSet") BackgroundSet backgroundSet,
+            final @MapsTo("fontSet") FontSet fontSet,
+            final @MapsTo("dimensionsSet") RectangleDimensionsSet dimensionsSet,
+            final @MapsTo("simulationSet") SimulationSet simulationSet,
+            final @MapsTo("taskType") TaskType taskType
+    ) {
+        super(general, backgroundSet, fontSet, dimensionsSet, simulationSet, taskType);
+        this.executionSet = executionSet;
+    }
+
+    public ScoringTaskExecutionSet getExecutionSet() {
+        return executionSet;
+    }
+
+    public void setExecutionSet(final ScoringTaskExecutionSet executionSet) {
+        this.executionSet = executionSet;
+    }
+
+    @Override
+    public int hashCode() {
+        return HashUtil.combineHashCodes(super.hashCode(), executionSet.hashCode());
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o instanceof ScoringTask) {
+            ScoringTask other = (ScoringTask) o;
+            return super.equals(other) && executionSet.equals(other.executionSet);
+        }
+        return false;
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/CashType.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/CashType.java
new file mode 100644
index 0000000000..66505df1e2
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/CashType.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.definition.property.task;
+
+import java.util.Objects;
+
+import org.jboss.errai.common.client.api.annotations.Portable;
+import org.jboss.errai.databinding.client.api.Bindable;
+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.FieldDefinition;
+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.FieldValue;
+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.I18nMode;
+import org.kie.workbench.common.stunner.bpmn.definition.BPMNProperty;
+import org.kie.workbench.common.stunner.core.definition.annotation.Property;
+import org.kie.workbench.common.stunner.core.definition.annotation.property.Value;
+import org.kie.workbench.common.stunner.core.util.HashUtil;
+
+@Portable
+@Bindable
+@Property
+@FieldDefinition(i18nMode = I18nMode.OVERRIDE_I18N_KEY)
+public class CashType implements BPMNProperty {
+
+    public final static String DEFAULT =  "DEFAULT";
+    public final static String NONE = "NONE";
+    public final static String CACHE_ONLY = "CACHE_ONLY";
+    public final static String FORCE_CACHE = "FORCE_CACHE";
+
+    @Value
+    @FieldValue
+    private String value;
+
+    public CashType() {
+        this(DEFAULT);
+    }
+
+    public CashType(final String value) {
+        if (value == null || value.isEmpty()) {
+            this.value = DEFAULT;
+        } else {
+            this.value = value;
+        }
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(final String value) {
+        this.value = value;
+    }
+
+    @Override
+    public int hashCode() {
+        return HashUtil.combineHashCodes(Objects.hashCode(value));
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o instanceof CashType) {
+            CashType other = (CashType) o;
+            return Objects.equals(value, other.value);
+        }
+        return false;
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/IntegrationTaskExecutionSet.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/IntegrationTaskExecutionSet.java
new file mode 100644
index 0000000000..69410f588d
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/IntegrationTaskExecutionSet.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.definition.property.task;
+
+import java.util.Objects;
+
+import javax.validation.Valid;
+
+import org.jboss.errai.common.client.api.annotations.MapsTo;
+import org.jboss.errai.common.client.api.annotations.Portable;
+import org.jboss.errai.databinding.client.api.Bindable;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FieldParam;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormDefinition;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormField;
+import org.kie.workbench.common.forms.adf.definitions.annotations.field.selector.SelectorDataProvider;
+import org.kie.workbench.common.forms.fields.shared.fieldTypes.basic.selectors.listBox.type.ListBoxFieldType;
+import org.kie.workbench.common.stunner.bpmn.definition.BPMNPropertySet;
+import org.kie.workbench.common.stunner.core.definition.annotation.Property;
+import org.kie.workbench.common.stunner.core.util.HashUtil;
+
+@Portable
+@Bindable
+@FormDefinition(startElement = "script")
+public class IntegrationTaskExecutionSet implements BPMNPropertySet {
+
+    @Property
+    @FormField(
+            type = ListBoxFieldType.class,
+            settings = {@FieldParam(name = "addEmptyOption", value = "DEFAULT")}
+    )
+    @SelectorDataProvider(
+            type = SelectorDataProvider.ProviderType.CLIENT,
+            className = "org.kie.workbench.common.stunner.bpmn.client.dataproviders.CacheProvider")
+    @Valid
+    private CashType cashType;
+
+    @FormField(readonly = true)
+    private String script;
+
+    public IntegrationTaskExecutionSet() {
+        this(new CashType(), "foo()");
+    }
+
+    public IntegrationTaskExecutionSet(
+            final @MapsTo("cashType") CashType cashType,
+            final @MapsTo("script") String script
+    ) {
+        this.cashType = cashType;
+        this.script = script;
+    }
+
+    public CashType getCashType() {
+        return cashType;
+    }
+
+    public void setCashType(final CashType cashType) {
+        this.cashType = cashType;
+    }
+
+    public String getScript() {
+        return script;
+    }
+
+    public void setScript(String script) {
+        this.script = script;
+    }
+
+    @Override
+    public int hashCode() {
+        return HashUtil.combineHashCodes(Objects.hashCode(cashType), Objects.hashCode(script));
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o instanceof IntegrationTaskExecutionSet) {
+            IntegrationTaskExecutionSet other = (IntegrationTaskExecutionSet) o;
+            return Objects.equals(cashType, other.cashType) && Objects.equals(script, other.script);
+        }
+        return false;
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/ScoringTaskExecutionSet.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/ScoringTaskExecutionSet.java
new file mode 100644
index 0000000000..11613b7b4c
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/task/ScoringTaskExecutionSet.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kie.workbench.common.stunner.bpmn.definition.property.task;
+
+import java.util.Objects;
+
+import org.jboss.errai.common.client.api.annotations.MapsTo;
+import org.jboss.errai.common.client.api.annotations.Portable;
+import org.jboss.errai.databinding.client.api.Bindable;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormDefinition;
+import org.kie.workbench.common.forms.adf.definitions.annotations.FormField;
+import org.kie.workbench.common.stunner.bpmn.definition.BPMNPropertySet;
+import org.kie.workbench.common.stunner.core.util.HashUtil;
+
+@Portable
+@Bindable
+@FormDefinition(startElement = "script")
+public class ScoringTaskExecutionSet implements BPMNPropertySet {
+
+    @FormField(readonly = true)
+    private String script;
+
+    public ScoringTaskExecutionSet() {
+        this("bar()");
+    }
+
+    public ScoringTaskExecutionSet(final @MapsTo("script") String script) {
+        this.script = script;
+    }
+
+    public String getScript() {
+        return script;
+    }
+
+    public void setScript(final String script) {
+        this.script = script;
+    }
+
+    @Override
+    public int hashCode() {
+        return HashUtil.combineHashCodes(Objects.hashCode(script));
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o instanceof ScoringTaskExecutionSet) {
+            ScoringTaskExecutionSet other = (ScoringTaskExecutionSet) o;
+            return Objects.equals(script, other.script);
+        }
+        return false;
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeListFieldDefinition.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeListFieldDefinition.java
new file mode 100644
index 0000000000..380eaaa855
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeListFieldDefinition.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.forms.model;
+
+import org.jboss.errai.common.client.api.annotations.Portable;
+import org.jboss.errai.databinding.client.api.Bindable;
+import org.kie.workbench.common.forms.fields.shared.AbstractFieldDefinition;
+import org.kie.workbench.common.forms.model.FieldDefinition;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.ScriptTypeListValue;
+
+import static org.kie.workbench.common.stunner.bpmn.forms.model.ScriptTypeMode.ACTION_SCRIPT;
+
+@Portable
+@Bindable
+public class CashTypeListFieldDefinition extends AbstractFieldDefinition {
+
+    public static final CashTypeListFieldType FIELD_TYPE = new CashTypeListFieldType();
+
+    private ScriptTypeMode mode = ACTION_SCRIPT;
+
+    public CashTypeListFieldDefinition() {
+        super(ScriptTypeListValue.class.getName());
+    }
+
+    @Override
+    public CashTypeListFieldType getFieldType() {
+        return FIELD_TYPE;
+    }
+
+    public ScriptTypeMode getMode() {
+        return mode;
+    }
+
+    public void setMode(ScriptTypeMode mode) {
+        this.mode = mode;
+    }
+
+    @Override
+    protected void doCopyFrom(FieldDefinition other) {
+        //no processing is needed for this field type
+    }
+}
\ No newline at end of file
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeListFieldType.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeListFieldType.java
new file mode 100644
index 0000000000..4a08890b71
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeListFieldType.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.forms.model;
+
+import org.jboss.errai.common.client.api.annotations.Portable;
+import org.kie.workbench.common.forms.model.FieldType;
+
+@Portable
+public class CashTypeListFieldType implements FieldType {
+
+    public static final String NAME = "CashTypeListFieldType";
+
+    @Override
+    public String getTypeName() {
+        return NAME;
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeMode.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeMode.java
new file mode 100644
index 0000000000..b5c19e4502
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/CashTypeMode.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.forms.model;
+
+public enum CashTypeMode {
+    ALL
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/CacheProvider.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/CacheProvider.java
new file mode 100644
index 0000000000..9c44d30807
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/CacheProvider.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.client.dataproviders;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.TreeMap;
+
+import javax.annotation.PostConstruct;
+import javax.enterprise.context.Dependent;
+import javax.inject.Inject;
+
+import org.jboss.errai.ui.client.local.spi.TranslationService;
+import org.kie.workbench.common.forms.dynamic.model.config.SelectorData;
+import org.kie.workbench.common.forms.dynamic.model.config.SelectorDataProvider;
+import org.kie.workbench.common.forms.dynamic.service.shared.FormRenderingContext;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.CashType;
+import org.kie.workbench.common.stunner.core.util.SafeComparator;
+
+@Dependent
+public class CacheProvider implements SelectorDataProvider {
+
+    private enum CACHE_TYPE {
+
+        DEFAULT(CashType.DEFAULT, "org.kie.workbench.common.stunner.bpmn.client.dataproviders.CacheProvider.DEFAULT"),
+        NONE(CashType.NONE, "org.kie.workbench.common.stunner.bpmn.client.dataproviders.CacheProvider.NONE"),
+        CACHE_ONLY(CashType.CACHE_ONLY, "org.kie.workbench.common.stunner.bpmn.client.dataproviders.CacheProvider.CACHE_ONLY"),
+        FORCE_CACHE(CashType.FORCE_CACHE, "org.kie.workbench.common.stunner.bpmn.client.dataproviders.CacheProvider.FORCE_CACHE");
+
+        private final String value;
+
+        private final String i18nKey;
+
+        CACHE_TYPE(String value, String i18nKey) {
+            this.value = value;
+            this.i18nKey = i18nKey;
+        }
+
+        public String value() {
+            return value;
+        }
+
+        public String i18nKey() {
+            return i18nKey;
+        }
+    }
+
+    private static Map<Object, Integer> valuePosition;
+
+    private final TranslationService translationService;
+
+    @Inject
+    public CacheProvider(final TranslationService translationService) {
+        this.translationService = translationService;
+    }
+
+    @PostConstruct
+    protected void init() {
+        valuePosition = new HashMap<>();
+        valuePosition.put(CACHE_TYPE.DEFAULT.value(), 0);
+        valuePosition.put(CACHE_TYPE.NONE.value(), 1);
+        valuePosition.put(CACHE_TYPE.CACHE_ONLY.value(), 2);
+        valuePosition.put(CACHE_TYPE.FORCE_CACHE.value(), 3);
+    }
+
+    private SafeComparator<Object> getComparator() {
+        return SafeComparator.TO_STRING_REVERSE_COMPARATOR;
+    }
+
+    @Override
+    public String getProviderName() {
+        return getClass().getSimpleName();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public SelectorData getSelectorData(final FormRenderingContext context) {
+        Map<Object, String> values = new TreeMap<>(SafeComparator.of(this::getComparator));
+        Arrays.stream(CACHE_TYPE.values())
+                .forEach(ruleLanguage -> values.put(ruleLanguage.value(),
+                        translationService.getTranslation(ruleLanguage.i18nKey())));
+
+        return new SelectorData(values, CACHE_TYPE.DEFAULT.value());
+    }
+}
\ No newline at end of file
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/IntegrationTask.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/IntegrationTask.java
new file mode 100644
index 0000000000..fa4577607f
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/IntegrationTask.java
@@ -0,0 +1,21 @@
+/*
+ * <copyright>
+ * 
+ * Copyright (c) 2010 SAP AG.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation
+ * 
+ * </copyright>
+ */
+
+package org.eclipse.bpmn2;
+
+public interface IntegrationTask extends Task {
+    String getScript();
+    void setScript(String value);
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/ScoringTask.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/ScoringTask.java
new file mode 100644
index 0000000000..bfab761b2d
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/ScoringTask.java
@@ -0,0 +1,20 @@
+/**
+ * <copyright>
+ * 
+ * Copyright (c) 2010 SAP AG.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation
+ * 
+ * </copyright>
+ */
+package org.eclipse.bpmn2;
+
+public interface ScoringTask extends Task {
+    void setScript(String value);
+    String getScript();
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/IntegrationTaskImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/IntegrationTaskImpl.java
new file mode 100644
index 0000000000..df07102682
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/IntegrationTaskImpl.java
@@ -0,0 +1,100 @@
+/**
+ * <copyright>
+ * 
+ * Copyright (c) 2010 SAP AG.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation
+ * 
+ * </copyright>
+ */
+
+package org.eclipse.bpmn2.impl;
+
+import com.google.gwt.user.client.rpc.GwtTransient;
+
+import org.eclipse.bpmn2.Bpmn2Package;
+import org.eclipse.bpmn2.IntegrationTask;
+
+import org.eclipse.emf.common.notify.Notification;
+
+import org.eclipse.emf.ecore.EClass;
+import org.eclipse.emf.ecore.impl.ENotificationImpl;
+
+public class IntegrationTaskImpl extends TaskImpl implements IntegrationTask {
+
+    protected static final String SCRIPT_DEFAULT = null;
+
+    @GwtTransient
+    protected String script = SCRIPT_DEFAULT;
+
+    protected IntegrationTaskImpl() {
+        super();
+    }
+
+    @Override
+    public String getScript() {
+        return script;
+    }
+
+    @Override
+    public void setScript(String newScript) {
+        String oldScript = script;
+        script = newScript;
+        if (eNotificationRequired())
+            eNotify(new ENotificationImpl(this, Notification.SET, Bpmn2Package.SCRIPT_TASK__SCRIPT, oldScript, script));
+    }
+
+    @Override
+    protected EClass eStaticClass() {
+        return Bpmn2Package.Literals.INTEGRATION_TASK;
+    }
+
+    @Override
+    public String toString() {
+        if (eIsProxy()) return super.toString();
+        return super.toString() + " (script: " + script + " )";
+    }
+}
+
+/*
+
+    protected static final String SCRIPT_EDEFAULT = null;
+
+    @GwtTransient
+    protected String script = SCRIPT_EDEFAULT;
+
+    protected static final String SCRIPT_FORMAT_EDEFAULT = null;
+
+    protected IntegrationTaskImpl() {
+        super();
+    }
+
+    @Override
+    protected EClass eStaticClass() {
+        return Bpmn2Package.Literals.SCRIPT_TASK;
+    }
+
+    @Override
+    public String getScript() {
+        return script;
+    }
+
+    @Override
+    public void setScript(String newScript) {
+        String oldScript = script;
+        script = newScript;
+        if (eNotificationRequired())
+            eNotify(new ENotificationImpl(this, Notification.SET, Bpmn2Package.SCRIPT_TASK__SCRIPT, oldScript, script));
+    }
+
+    @Override
+    public String toString() {
+        if (eIsProxy()) return super.toString();
+        return super.toString() + " (script: " + script + " )";
+    }
+*/
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/ScoringTaskImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/ScoringTaskImpl.java
new file mode 100644
index 0000000000..3942845eed
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/ScoringTaskImpl.java
@@ -0,0 +1,84 @@
+/**
+ * <copyright>
+ * 
+ * Copyright (c) 2010 SAP AG.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation
+ * 
+ * </copyright>
+ */
+
+package org.eclipse.bpmn2.impl;
+
+import com.google.gwt.user.client.rpc.GwtTransient;
+
+import org.eclipse.bpmn2.Bpmn2Package;
+import org.eclipse.bpmn2.ScoringTask;
+
+import org.eclipse.emf.common.notify.Notification;
+
+import org.eclipse.emf.ecore.EClass;
+import org.eclipse.emf.ecore.impl.ENotificationImpl;
+
+public class ScoringTaskImpl extends TaskImpl implements ScoringTask {
+
+
+    protected static final String SCRIPT_DEFAULT = null;
+
+    @GwtTransient
+    protected String script = SCRIPT_DEFAULT;
+
+    protected ScoringTaskImpl() {
+        super();
+    }
+
+    @Override
+    protected EClass eStaticClass() {
+        return Bpmn2Package.Literals.SCORING_TASK;
+    }
+
+    @Override
+    public String getScript() {
+        return script;
+    }
+
+    @Override
+    public void setScript(String newScript) {
+        String oldScript = script;
+        script = newScript;
+        if (eNotificationRequired())
+            eNotify(new ENotificationImpl(this, Notification.SET, Bpmn2Package.SCRIPT_TASK__SCRIPT, oldScript, script));
+    }
+
+    @Override
+    public String toString() {
+        if (eIsProxy()) return super.toString();
+        return super.toString() + " (script: " + script + " )";
+    }
+}
+
+/*
+
+    protected static final String SCRIPT_EDEFAULT = null;
+
+    @GwtTransient
+    protected String script = SCRIPT_EDEFAULT;
+
+    @Override
+    protected EClass eStaticClass() {
+        return Bpmn2Package.Literals.SCORING_TASK;
+    }
+
+    @Override
+    public void setScript(String newScript) {
+        String oldScript = script;
+        script = newScript;
+        if (eNotificationRequired())
+            eNotify(new ENotificationImpl(this, Notification.SET, Bpmn2Package.SCRIPT_TASK__SCRIPT, oldScript, script));
+    }
+*/
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/fromstunner/properties/IntegrationTaskPropertyWriter.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/fromstunner/properties/IntegrationTaskPropertyWriter.java
new file mode 100644
index 0000000000..0155441fc0
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/fromstunner/properties/IntegrationTaskPropertyWriter.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.client.marshall.converters.fromstunner.properties;
+
+import java.util.Set;
+
+import org.eclipse.bpmn2.DataObject;
+import org.eclipse.bpmn2.IntegrationTask;
+import org.kie.workbench.common.stunner.bpmn.client.marshall.converters.customproperties.CustomElement;
+
+public class IntegrationTaskPropertyWriter extends ActivityPropertyWriter {
+
+    private final IntegrationTask integrationTask;
+
+    public IntegrationTaskPropertyWriter(IntegrationTask integrationTask, VariableScope variableScope, Set<DataObject> dataObjects) {
+        super(integrationTask, variableScope, dataObjects);
+        this.integrationTask = integrationTask;
+    }
+
+    public void setCashType(String value) {
+        CustomElement.cashType.of(integrationTask).set(value);
+    }
+
+    public void setScript(String script) {
+        CustomElement.script.of(integrationTask).set(script);
+
+//        if (script != null && !script.isEmpty()) {
+//            integrationTask.setScript(asCData(script));
+//        }
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/fromstunner/properties/ScoringTaskPropertyWriter.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/fromstunner/properties/ScoringTaskPropertyWriter.java
new file mode 100644
index 0000000000..8b56c65093
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/fromstunner/properties/ScoringTaskPropertyWriter.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.client.marshall.converters.fromstunner.properties;
+
+import java.util.Set;
+
+import org.eclipse.bpmn2.DataObject;
+import org.eclipse.bpmn2.ScoringTask;
+import org.kie.workbench.common.stunner.bpmn.client.marshall.converters.customproperties.CustomElement;
+
+public class ScoringTaskPropertyWriter extends ActivityPropertyWriter {
+
+    private final ScoringTask scoringTask;
+
+    public ScoringTaskPropertyWriter(ScoringTask scoringTask, VariableScope variableScope, Set<DataObject> dataObjects) {
+        super(scoringTask, variableScope, dataObjects);
+        this.scoringTask = scoringTask;
+    }
+
+    public void setScript(String script) {
+        CustomElement.script.of(scoringTask).set(script);
+
+//        if (script != null && !script.isEmpty()) {
+//            scoringTask.setScript(asCData(script));
+//        }
+    }
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/IntegrationTaskPropertyReader.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/IntegrationTaskPropertyReader.java
new file mode 100644
index 0000000000..d93add38bd
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/IntegrationTaskPropertyReader.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.client.marshall.converters.tostunner.properties;
+
+import org.eclipse.bpmn2.IntegrationTask;
+import org.eclipse.bpmn2.di.BPMNDiagram;
+import org.kie.workbench.common.stunner.bpmn.client.marshall.converters.customproperties.CustomElement;
+import org.kie.workbench.common.stunner.bpmn.client.marshall.converters.tostunner.DefinitionResolver;
+import org.kie.workbench.common.stunner.bpmn.definition.property.task.CashType;
+
+public class IntegrationTaskPropertyReader extends TaskPropertyReader {
+
+    private final IntegrationTask task;
+
+    public IntegrationTaskPropertyReader(IntegrationTask task, BPMNDiagram diagram, DefinitionResolver definitionResolver) {
+        super(task, diagram, definitionResolver);
+        this.task = task;
+    }
+
+    public String getCashType() {
+        return CustomElement.cashType.of(element).get();
+    }
+
+    public String getScript() {
+        return CustomElement.script.of(element).get();
+    }
+
+}
diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/ScoringTaskPropertyReader.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/ScoringTaskPropertyReader.java
new file mode 100644
index 0000000000..d26be246eb
--- /dev/null
+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/ScoringTaskPropertyReader.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kie.workbench.common.stunner.bpmn.client.marshall.converters.tostunner.properties;
+
+import org.eclipse.bpmn2.ScoringTask;
+import org.eclipse.bpmn2.di.BPMNDiagram;
+import org.kie.workbench.common.stunner.bpmn.client.marshall.converters.tostunner.DefinitionResolver;
+
+public class ScoringTaskPropertyReader extends TaskPropertyReader {
+
+    private final ScoringTask task;
+
+    public ScoringTaskPropertyReader(ScoringTask task, BPMNDiagram diagram, DefinitionResolver definitionResolver) {
+        super(task, diagram, definitionResolver);
+        this.task = task;
+    }
+
+    public String getScript() {
+        return task.getScript();
+    }
+
+}
